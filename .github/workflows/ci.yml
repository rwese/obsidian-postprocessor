name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ main.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings
        flake8 src/ tests/ main.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff src/ tests/ main.py

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/ main.py

    - name: Validate configuration
      run: |
        python main.py --validate
      env:
        VAULT_PATH: ./testvault/test-vault
        PROCESSOR_SCRIPT_PATH: ./processor/add_transcript_to_voicememo.py

    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short

    - name: Test application help and status
      run: |
        python main.py --help
        python main.py --config
      env:
        VAULT_PATH: ./testvault/test-vault
        PROCESSOR_SCRIPT_PATH: ./processor/add_transcript_to_voicememo.py

    - name: Run dry-run on test vault
      run: |
        python main.py --dry-run
      env:
        VAULT_PATH: ./testvault/test-vault
        PROCESSOR_SCRIPT_PATH: ./processor/add_transcript_to_voicememo.py

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run comprehensive linting
      run: |
        echo "=== Running flake8 ==="
        flake8 src/ tests/ main.py --max-line-length=127 --extend-ignore=E203,W503
        
        echo "=== Running black (check only) ==="
        black --check src/ tests/ main.py
        
        echo "=== Running isort (check only) ==="
        isort --check-only src/ tests/ main.py
        
        echo "=== Running mypy ==="
        mypy src/ --ignore-missing-imports || echo "mypy completed with warnings"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ || echo "Bandit scan completed with findings"

    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || echo "Safety check completed"

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify application can be imported
      run: |
        python -c "
        import sys
        from pathlib import Path
        sys.path.insert(0, str(Path('src')))
        from src.config import Config
        from src.processor import ObsidianProcessor
        from src.voice_memo_detector import VoiceMemoDetector
        from src.state_manager import StatelessStateManager
        from src.runner import ScriptRunner
        print('✓ All modules imported successfully')
        "

    - name: Create distribution package
      run: |
        python -m pip install --upgrade build
        python -m build || echo "Build step completed - no setup.py found, this is expected"

    - name: Test Docker build (if Dockerfile exists)
      run: |
        if [ -f Dockerfile ]; then
          echo "Building Docker image..."
          docker build -t obsidian-postprocessor:test .
          echo "✓ Docker build successful"
        else
          echo "No Dockerfile found, skipping Docker build"
        fi